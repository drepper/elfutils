debuginfo-server motivation

- remote access to debuginfo & related sources for near-instant debugging
- easier & faster than 'sudo dnf debuginfo-install ...'
- unprivileged
- include distro blessed files/packages, and
- also serve plain local executables

debuginfo-server architecture

- traditional client/server, transport across http
- client: elfutils code (shipped with elfutils), web
- server: single program (c++, shipped with elfutils?)
- design to be proxiable / cacheable
- fallback/default data: entire dwarf/source file
- ideal/future data: dwarf query resultsets, source file segments,
  to offload more computation ... not detailed below

debuginfo-server webapi

- answers plain unauthenticated http, compressed, etag'd
- basic GET requests:
  /buildid/HEXCODE/debuginfo   (may include executable)
  /buildid/HEXCODE/executable  (may include debuginfo)
  /buildid/HEXCODE/source-file/PATH/TO/FILE
- normal responses:
  200 content
  206 partial-content
  303 redirect-to-URL
  304 not-modified
  404 not-found, boo hoo
  503 retry-after, for long operation in progress (?)
- administrative GET requests:
  /buildids -> return list of known buildids
  /sources -> describe list of known data sources
  /metrics -> return prometheus format internal metrics

debuginfo-server backends

- a directory of files (/usr, /usr/local, $HOME/random-build-tree)
- a yum/dnf download-on-the-fly
- a brewroot / koji download-on-the-fly (?)
- a redirect proxy (300 delegation to upstream)
- a relay proxy (download from upstream & relay live)

debuginfo-server clients

- elfutils -- a $DEBUGINFO_PATH extension (URL), which the
  report_* functions would query if necessary
  - dyninst + systemtap: inherit automatically
- gdb:
  - an extension of the buildid extension, hope not too large,
    hope gdb team helps!

see-also

- nixos dwarffs https://github.com/edolstra/dwarffs
- http://post-office.corp.redhat.com/archives/tools/2018-October/msg00002.html

--- complications

- files that change content after scan
- database schema changes

